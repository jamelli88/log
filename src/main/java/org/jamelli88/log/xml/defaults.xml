<?xml version="1.0" encoding="UTF-8"?>
<included>
    <!--
         规则：
            dev 开发环境： 启用实时打印日志，启用p6spy打印sql语句到控制台
            其他环境:  启用异步打印，  禁用p6spy
           %m
           输出代码中指定的消息
           %p
           输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
           %r
           输出自应用启动到输出该log信息耗费的毫秒数
           %c
           输出所属的类目，通常就是所在类的全名
           %t
           输出产生该日志事件的线程名
           %n
           输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
           %d
           输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，
           输出类似：2002年10月18日 22：10：28，921
           %l
           输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
           %X{tenant}:租户code
           %X{userid}:用户ID
           %X{tid}:链路追踪ID
           %X{trace}
           %X{logType}:日志类型
           %X{extInfo}:操作日志信息
        -->
    <springProperty scope="context" name="log.path" source="logging.file.path" defaultValue="/data/projects/logs"/>
    <springProperty scope="context" name="spring.application.name" source="spring.application.name"/>
    <springProperty scope="context" name="spring.profiles.active" source="spring.profiles.active"/>
    <springProperty scope="context" name="log.level.console" source="logging.level.console" defaultValue="INFO"/>
    <springProperty scope="context" name="log.level.controller" source="logging.level.controller" defaultValue="INFO"/>
    <springProperty scope="context" name="log.level.service" source="logging.level.service" defaultValue="INFO"/>
    <springProperty scope="context" name="log.level.dao" source="logging.level.sql" defaultValue="DEBUG"/>
    <springProperty scope="context" name="log.level.nacos" source="logging.level.nacos" defaultValue="WARN"/>
    <springProperty scope="context" name="server.port" source="server.port" defaultValue="0000"/>
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="ip" converterClass="org.jamelli88.log.converter.LogIpConverter" />
    <conversionRule conversionWord="xMarker" converterClass="org.jamelli88.log.converter.XMarkerConverter" />
    <conversionRule conversionWord="xLogger" converterClass="org.jamelli88.log.converter.XLoggerConverter" />
    <conversionRule conversionWord="xMethod" converterClass="org.jamelli88.log.converter.XMethodOfCallerConverter" />
    <conversionRule conversionWord="xLine" converterClass="org.jamelli88.log.converter.XLineOfCallerConverter" />
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <!-- 彩色日志格式 -->
    <springProperty scope="context" name="common-pattern-color" source="logging.common-pattern-color"
                    defaultValue="%boldBlue([${spring.application.name}]) %boldYellow([%ip:${server.port}]) %cyan([%d{yyyy-MM-dd HH:mm:ss.SSS}]) %magenta([%5p]) %blue([%xMarker]) %boldYellow([%t]) %yellow([%xLogger.%xMethod:%xLine]) %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>
    <springProperty scope="context" name="common-pattern" source="logging.common-pattern"
                    defaultValue="[${spring.application.name}] [%ip:${server.port}] [%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5p] [%xMarker] [%t] [%xLogger.%xMethod:%xLine] %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>

    <contextName>${spring.application.name}-logback</contextName>

    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <jmxConfigurator/>

    <!-- 控制台实时输出，采用高亮语法，用于开发环境 -->
    <appender name="CONSOLE_APPENDER" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
        </filter>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>${common-pattern-color}</pattern>
            </layout>
        </encoder>
    </appender>

    <!-- 控制台异步实时输出 -->
    <appender name="ASYNC_CONSOLE_APPENDER" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="CONSOLE_APPENDER"/>
    </appender>

    <!-- 整个项目的所有日志 -->
    <appender name="ROOT_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/${spring.application.name}/root.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天一归档 -->
            <fileNamePattern>${log.path}/${spring.application.name}/%d{yyyy-MM}/root-%d{yyyy-MM-dd}-%i.log.gz
            </fileNamePattern>
            <!-- 单个日志文件最多 100MB, 60天的日志周期，最大不能超过20GB -->
            <maxFileSize>128MB</maxFileSize>
            <maxHistory>60</maxHistory>
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>${common-pattern}</pattern>
            </layout>
        </encoder>
    </appender>
    <appender name="ASYNC_ROOT_APPENDER" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>256</queueSize>
        <appender-ref ref="ROOT_APPENDER"/>
    </appender>
</included>
